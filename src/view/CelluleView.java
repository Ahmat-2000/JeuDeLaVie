package view;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import model.Cellule;
import model.observer.ModelListener;

/**
 * @author Ahmat Mahamat Ahmat
 * @version 1.0
 * Represents the visual component of a single cell (Cellule) within a grid or matrix.
 * Each CelluleView is a button that can change its appearance based on the state of the
 * associated Cellule model and can also update the model based on user interactions.
 */
public class CelluleView extends JButton implements ModelListener, ActionListener {
    /** The cell model this view represents. */
    private Cellule cellule;

    /**
     * Constructs a CelluleView with an associated Cellule model.
     * Initializes the button, registers itself as a listener to model changes,
     * sets its initial appearance, and adds an ActionListener to handle user clicks.
     *
     * @param cellule The Cellule model this view is representing.
     */
    public CelluleView(Cellule cellule) {
        this.cellule = cellule;
        this.cellule.addModelListener(this); // Register as a listener to the Cellule model.
        this.setBackground(Color.WHITE); // Set the initial background color.
        this.addActionListener(this); // Listen to user clicks on this button.
    }

    /**
     * Updates the appearance of this CelluleView when the associated Cellule model changes state.
     * This method is called in response to notifications from the Cellule model.
     *
     * @param source The source of the change notification, typically the Cellule model.
     */
    @Override
    public void somethingHasChanged(Object source) {
        // Update the background color based on the state of the Cellule model.
        if (this.cellule.getEtat()) {
            this.setBackground(Color.BLACK); // Cell is "alive" or "active".
        } else {
            this.setBackground(Color.WHITE); // Cell is "dead" or "inactive".
        }
    }

    /**
     * Handles user clicks on this CelluleView, updating the associated Cellule model's state.
     * This method is called when the CelluleView is clicked by the user.
     *
     * @param e The ActionEvent generated by clicking the button.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        this.setEnabled(false); // Optionally disable the button to prevent further clicks.
        this.cellule.setEtat(true); // Update the Cellule model's state.
    }
}
